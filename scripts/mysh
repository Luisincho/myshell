#!/usr/bin/env bash

# Description: mysh manager.

BASE_PATH=$(dirname "$(realpath "$0")")

# printers

_printer_dp_plain() {
    printf '%s: %s\n' "$1" "$([ -n "$2" ] && echo "$2" || echo "No description found.")"
}

_printer_dp_markdown() {
    command_link=$(echo "$1" | sed -n "s|$1|[$1](https://github.com/matiascaniete/myshell/blob/main/scripts/$1)|p")
    printf '**%s**: %s\n' "$command_link" "$([ -n "$2" ] && echo "$2" || echo "No description found.")"
}

# helpers

raw_list() {
    find "$BASE_PATH" -type f | sort | xargs -n1 basename | xargs -I{} mysh description {} "$1"
}

# subcommands

update() {
    cd "$BASE_PATH" && git pull --ff-only
}

description() {
    options=$(getopt -o "p:" -l "printer:" -n "$0" -- "$@")

    eval set -- "$options"

    printer="dp_plain"
    while true; do
        case "$1" in
            -p | --printer)
                printer="$2"
                if [ "$printer" != "dp_plain" ] && [ "$printer" != "dp_markdown" ]; then
                    printf "Invalid printer [%s]\n" "$printer" && exit 1
                fi
                shift 2
                ;;
            --)
                shift
                break
                ;;
        esac
    done

    command="$1"
    description=$(grep -iE "^#.Description:" "$BASE_PATH/$command" | grep -v "^#!" | cut -d: -f2- | xargs)
    eval "_printer_$printer '$command' '$description'"
    [ -n "$description" ]
}

list() {
    raw_list dp_plain | column -s":" -t
}

md() {
    printf "# List of commands\n\n"
    { raw_list dp_markdown | xargs -I{} printf '- %s\n' {}; }
}

md2doc() {
    md | tee "$BASE_PATH/../docs/COMMANDS.md"
}

commands() {
    mdless "$BASE_PATH/../docs/COMMANDS.md" --no-pager | bat --decorations=never
}

help() {
    mdless "$BASE_PATH/../README.md" --no-pager | bat --decorations=never
}

create() {
    filename="$BASE_PATH/$1"
    touch "$filename" && chmod +x "$filename" && $EDITOR "$filename"
}

# main

if [ -z "$1" ]; then
    printf "No sub-command was given\n" && exit 1
fi

[[ ! $(type -t "$1" 2>/dev/null) =~ () ]] && {
    printf "Sub-command [%s] not found!\nMaybe you mean:\n" "$1"
    declare -F | cut -d " " -f3- | fzf --filter "$1" | xargs -n1 printf "%s %s\n" "$(basename "$0")"
    exit 1
}

$@
