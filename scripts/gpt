#! /bin/env bash

# Description: OpenAI gpt chat

SCRIPT_PATH="$(dirname "$(readlink -f "$0")")"
ROLES_PATH=$(realpath "$SCRIPT_PATH/../assets/gpt/roles")

FULL_RESPONSE=0
DEBUG=0

DEFAULT_MODEL="gpt-3.5-turbo-16k"
OPENAI_MODEL=""
ROLE=""
TEMPERATURE=1

gpt() {
    model=${OPENAI_MODEL:-$DEFAULT_MODEL}

    if [ "$ROLE" ]; then
        role_file=$ROLES_PATH/$ROLE
        role_content=$(cat "$role_file")
    else
        role_content=""
    fi

    if [ "$role_content" ]; then
        role_json_message=$(jq -Rs '. as $content | {role: "system", content: $content}' <<< "$role_content")
        role_json_message="$role_json_message,"
    else
        role_json_message=""
    fi

    user_json_message=$(jq -Rs '. as $content | {role: "user", content: $content}' <<< "$*")

    command='curl -s https://api.openai.com/v1/chat/completions \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d "{
        \"model\": \"$model\",
        \"temperature\": $TEMPERATURE,
        \"user\": \"myshell-gpt-chat\",
        \"messages\": [
            $role_json_message
            $user_json_message
        ]
    }"'

    if [ "$DEBUG" = 0 ]; then
        eval "$command"
    else
        echo "TEMPERATURE: $TEMPERATURE"
        echo "MODEL: $model"
        echo "ROLE: $ROLE"
        echo "ROLE_MESSAGE: $role_json_message"
        echo "USER_MESSAGE: $user_json_message"
        echo "COMMAND: $command"
        exit
    fi
}

parse-message() {
    response=$(cat)
    error=$(echo "$response" | jq -r '.error.message')
    if [[ $error != "null" ]]; then
        echo "$error" >&2
        exit 1
    else
        data=$(echo "$response" | jq -r '.choices[].message.content')
        echo "$data"
    fi
}

# Options and arguments parsing

options=$(getopt -o dhft:m:r: --long debug,help,full-response,temperature:,model:,role:,list-roles,list-models,create-role:,show-role:,file: -- "$@")
eval set -- "$options"

while true; do
    case "$1" in
        -h | --help)
            printf "Usage: %s <message>\n" "$(basename "$0")"
            exit 0
            ;;
        -d | --debug)
            DEBUG=1
            shift
            ;;
        -f | --full-response)
            FULL_RESPONSE=1
            shift
            ;;
        -m | --model)
            OPENAI_MODEL="$2"
            shift 2
            ;;
        -r | --role)
            ROLE="$2"
            shift 2
            ;;
        -t | --temperature)
            TEMPERATURE="$2"
            shift 2
            ;;
        --create-role)
            ROLE="$2"
            echo "$(cat)" >"$ROLES_PATH/$ROLE"
            exit
            ;;
        --show-role)
            ROLE="$2"
            cat "$ROLES_PATH/$ROLE"
            exit
            ;;
        --list-roles)
            ls "$ROLES_PATH" | awk -F. '{print $1}'
            exit 0
            ;;
        --list-models)
            echo "gpt-3.5-turbo-16k"
            echo "gpt-3.5-turbo"
            exit 0
            ;;
        --file)
            FILE="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
    esac
done

prompt=""

if [ ! -t 0 ]; then
    prompt=$(cat)
fi

if [ -f "$FILE" ]; then
    prompt=$(printf "%s\n%s" "$prompt" "$(cat "$FILE")")
fi

if [ -n "$*" ]; then
    prompt=$(printf "%s\n%s" "$prompt" "$*")
fi

if [ "$DEBUG" = 1 ]; then
    echo "PROMPT: $prompt"
    gpt "$prompt"
    exit
fi

if [ "$FULL_RESPONSE" -eq 1 ]; then
    # shellcheck disable=2068
    gpt "$prompt" | jq .
    exit
fi


if [ -f "$FILE" ]; then
    tmpfile=$(mktemp)
    (gpt "$prompt"|parse-message >"$tmpfile") && mv "$tmpfile" "$FILE"
    exit
fi

# shellcheck disable=2068
gpt "$prompt" | parse-message
