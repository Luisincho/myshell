#!/usr/bin/env sh

check_statements_from_file() {
    ERROR=0

    printf "%s truths\n" "$(basename "$1" | color cyan)"

    while read -r line; do
        if [ -n "$line" ]; then
            if echo "$line" | grep -qvE '^#'; then
                statement=$(echo "$line" | cut -d= -f1)
                expec_value=$(echo "$line" | cut -d= -f2- | tr -d "\n\r")
                evald_value="$(eval "$statement" 2>/dev/null | tr -d "\n\r")"

                color=green
                symbol="."
                if [ "$expec_value" != "$evald_value" ]; then
                    [ -n "$DEBUG" ] && printf "Error on line [%s]\nThe result of [eval %s] was [%s], expected [%s]\n" "$line" "$statement" "$evald_value" "$expec_value"
                    ERROR=1
                    color=red
                    symbol="!"
                fi

                printf '%s' "$(color $color $symbol)"
            else
                printf '%s' "$(color yellow "#")"
            fi
        fi
    done <"$1"

    printf "\n%s\n" "$([ $ERROR = 1 ] && color red "FAILED" || color green "PASSED")"
    return $ERROR
}

date_formatted() {
    date --rfc-3339=ns | cut -d. -f1
}

check_statements_from_dir() {
    for file in "$1"/*; do
        [ -f "$file" ] && check_statements_from_file "$file"
    done
}

[ -f "$1" ] && {
    check_statements_from_file "$1"
    date_formatted
    exit
}

[ -d "$1" ] && {
    check_statements_from_dir "$1"
    date_formatted
    exit
}

color red "A file or directory containing truth statements files must be given as a first argument" && exit 1
